
Linker Script: 链接脚本说明

```

ENTRY(start_)

SECTIONS {
    
    . = 0x100000;
    
    .hhk_init_text BLOCK(4K) :
    {
        * (.multiboot)
        build/obj/boot/*.o (.hhk_init)
        build/obj/boot/*.o (.text)
    }

    .hhk_init_bss BLOCK(4K) :
    {
        build/obj/boot/*.o (.bss)
    }
    
    .hhk_init_data BLOCK(4K) :
    {
        build/obj/boot/*.o (.data)
    }

    .hhk_init_rodata BLOCK(4K) :
    {
        build/obj/boot/*.o (.rodata)
    }

    . += 0xC0000000;

    .text BLOCK(4K) : AT ( ADDR(.text) - 0xC0000000)
    {
        __kernel_start = .;
        build/obj/kernel/*.o (.text)
    }
    
    .bss BLOCK(4K) : AT ( ADDR(.bss) - 0xC0000000)
    {
        build/obj/kernel/*.o (.bss)
    }

    .data BLOCK(4K) : AT ( ADDR(.data) - 0xC0000000)
    {
        build/obj/kernel/*.o (.data)
    }
    
    .rodata BLOCK(4K) : AT ( ADDR(.rodata) - 0xC0000000)
    {
        build/obj/kernel/*.o (.rodata)
    }
    
    .kpg BLOCK(4K) : AT ( ADDR(.kpg) - 0xC0000000)
    {
    	build/obj/boot/*.o (.kpg)
        build/obj/kernel/*.o (.kpg)
    }

    __kernel_end = ALIGN(4K);
    __kernel_heap_start = ALIGN(4K);

}
```

ENTRY(start_)	指定了程序的入口点，就如汇编中的_start，multiboot+grub一般为start_

. = 0x100000	表示将程序加载到0x100000的位置上
. += 0xC0000000	表示地址增加0xC0000000 通常代表放到高半核

BLOCK(4K)	表示这个段4K对齐，即使长度不够也会自动补全到4K

AT ( ADDR(.text) - 0xC0000000)		AT表示程序所在的实际地址	ADDR表示获得当前段的地址，减去 0xC0000000 表示回到0x100000+n之后的地址	总的来说就是指定程序的实际地址为xxx
因为0x100000地址上的程序也会占用地址，所以用0x100000+n表示

